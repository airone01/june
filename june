#!/usr/bin/env bash
# v0.1.2

set -euo pipefail # :kappa:
IFS=$'\n\t'

# --- Configuration ---
PERSISTENT="${HOME}/sgoinfre"
VOLATILE="/tmp"
JUNEST_ROOT="${VOLATILE}/junest-root"
JUNEST_ARCHIVE="${PERSISTENT}/junest-root.tar.zst"
JUNEST_LOCK="${PERSISTENT}/.junest.lock"
SHIMS_DIR="${HOME}/bin"
STATE_DB="${VOLATILE}/june-state.db"
JUNE_STATE="${PERSISTENT}/june-state.db"
LOG_FILE="${VOLATILE}/june-startup.log"
JUNEST_VANILLA_CMD="$(command -v junest 2>/dev/null || true)"
JUNEST_CMD=($JUNEST_VANILLA_CMD ns --backend-args "--bind /sgoinfre /sgoinfre --bind /goinfre /goinfre")
JUNEST_CMD_SHIM=($JUNEST_VANILLA_CMD ns --backend-args \"--bind /sgoinfre /sgoinfre --bind /goinfre /goinfre\")
YAY_CMD="yay"
COMPRESS_CMD=(zstd -T$(($(nproc) / 2)) --adapt)
DECOMPRESS_CMD=(zstd -d)

# Check if stdout is a terminal for color output
if [[ -t 1 ]]; then
    USE_COLORS=1
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    YELLOW=$(tput setaf 3)
    BLUE=$(tput setaf 4)
    GRAY=$(tput setaf 8)
    NC=$(tput sgr0)
else
    USE_COLORS=0
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    GRAY=''
    NC=''
fi

# Set JUNEST_HOME environment variable
export JUNEST_HOME="$JUNEST_ROOT"

# Create dirs if needed
mkdir -p "$SHIMS_DIR" "$PERSISTENT" "$VOLATILE"

# --- Helpers ---
log() {
    if [[ "$1" == "--startup" ]]; then
        shift
        local msg="[$(date '+%Y-%m-%d %H:%M:%S')] $*"
        echo "$msg" | tee -a "$LOG_FILE"
    else
        printf "${BLUE}[june]${NC} %s\n" "$*"
    fi
}

err() {
    if [[ "$1" == "--startup" ]]; then
        shift
        local msg="[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $*"
        echo "$msg" >&2 | tee -a "$LOG_FILE"
    else
        printf "${RED}[june] ERROR: %s${NC}\n" "$*" >&2
    fi
}

show_help() {
    printf "${BLUE}Usage:${NC} june [--help] <command> [args]\n\n"
    printf "${YELLOW}Commands (packages):${NC}\n"
    printf "  ${BLUE}install ${GREEN}<pkgs>${NC}  Install package(s) (auto-syncs to persistent)\n"
    printf "  ${BLUE}remove ${GREEN}<pkgs>${NC}   Remove package(s)\n"
    printf "  ${BLUE}list${NC}            List user-installed packages\n"
    printf "  ${BLUE}list --all${NC}      List all installed packages\n"
    printf "  ${BLUE}search${GREEN} <query>${NC}  Search for packages\n"
    printf "  ${BLUE}update${NC}          Update all packages\n\n"
    printf "${YELLOW}Commands (image):${NC}\n"
    printf "  ${BLUE}sync${NC}            Syncs volatile → persistent\n"
    printf "  ${BLUE}startup${NC}         Run the automatic login script (syncs volatile ← persistent)\n"
    printf "  ${BLUE}clean-june${NC}      Clean up all junest installations and reset\n\n"
    printf "${YELLOW}Commands (debug):${NC}\n"
    printf "  ${BLUE}junest-log${NC}      Log into junest.${NC}\n"
    printf "                  ${YELLOW}Use if you know what you're doing only.${NC}\n"
    printf "  ${BLUE}junest${NC}          Launches the Junest binary.${NC}\n"
    printf "                  ${YELLOW}Use if you know what you're doing/if you're debugging only.${NC}\n"
    printf "  ${BLUE}doctor${NC}          Debug june environment setup/health\n\n"
    printf "${YELLOW}Global options:${NC}\n"
    printf "  ${BLUE}-h, --help${NC}      Show this help message\n\n"
    printf "${YELLOW}Examples:${NC}\n"
    printf "  june ${BLUE}install ${GREEN}neovim-bin${NC}      ${GRAY}# Install neovim (binary version)${NC}\n"
    printf "  june ${BLUE}install ${GREEN}code-bin${NC}        ${GRAY}# Install VS Code${NC}\n"
    printf "  june ${BLUE}search ${GREEN}python${NC}           ${GRAY}# Search for python packages${NC}\n"
    printf "  june ${BLUE}list${NC}                    ${GRAY}# Show user-installed packages${NC}\n"
    printf "  june ${BLUE}list --all${NC}              ${GRAY}# Show all installed packages${NC}\n"
    printf "  june ${BLUE}startup${NC}                 ${GRAY}# Initialize/sync environment${NC}\n"
    printf "  june ${BLUE}doctor${NC}                  ${GRAY}# Check environment health${NC}\n\n"
    printf "${YELLOW}Notes:${NC} Avoid '-git' variants to not build from source.\n"
    printf "       Changes are automatically synced to persistent storgae after operations.\n"
    printf "       Errors/questions? Contact me, ${GREEN}@airone01 ${NC}on Discord.\n"
}

cleanup_lock() {
    rm "$JUNEST_LOCK" 2>/dev/null && log "June lock freed" || true
}

acquire_lock() {
    local max_wait=60
    local waited=0

    while [[ -f "$JUNEST_LOCK" ]] && (( waited < max_wait )); do
        log "Waiting for another june operation to complete..."
        sleep 2
        ((waited += 2))
    done

    if [[ -f "$JUNEST_LOCK" ]]; then
        log "Lock timeout - removing stale lock"
        rm -f "$JUNEST_LOCK"
    fi

    log "June lock taken"
    log "$$" > "$JUNEST_LOCK"
    trap cleanup_lock EXIT
}

sync_to_sgoinfre() {
    if [[ ! -d "$JUNEST_ROOT" ]]; then
        err "No local junest environment to sync"
        return 1
    fi

    log "Syncing junest environment to ${YELLOW}persistent storage${NC}..."
    local temp_archive="${JUNEST_ARCHIVE}.tmp"

    if ! command -v pv >/dev/null 2>&1; then
        if ! tar -cf - -C "$VOLATILE" junest-root | "${COMPRESS_CMD[@]}" > "$temp_archive"; then
            err "Failed to compress junest environment"
            rm -f "$temp_archive"
            return 1
        fi
    else
        local dir_size
        dir_size=$(du -sb "$JUNEST_ROOT" | cut -f1)
        if ! tar -cf - -C "$VOLATILE" junest-root | pv -s "$dir_size" -petr | "${COMPRESS_CMD[@]}" > "$temp_archive"; then
            err "Failed to compress junest environment"
            rm -f "$temp_archive"
            return 1
        fi
    fi

    mv "$temp_archive" "$JUNEST_ARCHIVE" || {
        err "Could not move archive"
        return 1;
    }

    if [[ -f "$STATE_DB" ]]; then
        cp "$STATE_DB" "${PERSISTENT}/june-state.db"
    fi

    local size=$(du -h "$JUNEST_ARCHIVE" | cut -f1)
    log "Junest environment saved to ${YELLOW}persistent storage${NC} (compressed: $size)"
}

ensure_junest() {
    if [[ -z $JUNEST_CMD[0] ]]; then
        err "junest not found in PATH. Install junest first."
        err "Run: curl -L https://github.com/fsquillace/junest/releases/download/8.1.0/junest -o ~/.local/bin/junest && chmod +x ~/.local/bin/junest"
        return 1
    fi

    if [[ ! -d "$JUNEST_ROOT" ]]; then
        err "Junest environment not initialized. Run 'june startup' first."
        return 1
    fi

    export JUNEST_HOME="$JUNEST_ROOT"
}

create_shim() {
    local target_path="$1"
    local name="$2"
    local shim_file="${SHIMS_DIR}/${name}"
    cat > "$shim_file" <<EOF
#!/usr/bin/env bash
#june-shim
# Auto-generated by june
export JUNEST_HOME="${JUNEST_ROOT}"
exec ${JUNEST_CMD_SHIM[@]} -- "${target_path}" "\$@"
EOF
    chmod +x "$shim_file"
    log "Shim created: ${GREEN}$shim_file${NC} -> $target_path"
}

record_package() {
    local pkg="$1"
    local timestamp=$(date +%s)
    echo "${pkg}|${timestamp}|installed" >> "$STATE_DB"
}

# --- Startup Functions ---
ensure_dirs() {
    mkdir -p "$PERSISTENT" "$VOLATILE" "$SHIMS_DIR"

    # Check if persistent storage is accessible
    if ! touch "${PERSISTENT}/.test" 2>/dev/null; then
        err --startup "persistent storage not accessible at ${PERSISTENT}"
        return 1
    fi
    rm -f "${PERSISTENT}/.test"
}

sync_from_sgoinfre() {
    if [[ ! -f "$JUNEST_ARCHIVE" ]]; then
        log --startup "No junest archive found in persistent storage - will create fresh environment"
        return 1
    fi

    log --startup "Found junest archive in persistent storage ($(du -h "$JUNEST_ARCHIVE" | cut -f1))"

    # Check if local junest already exists and is up-to-date
    if [[ -d "$JUNEST_ROOT" ]]; then
        local archive_time=$(stat -c %Y "$JUNEST_ARCHIVE" 2>/dev/null || stat -f %m "$JUNEST_ARCHIVE" 2>/dev/null)
        local local_marker="${JUNEST_ROOT}/.june-sync-time"

        if [[ -f "$local_marker" ]]; then
            local local_time=$(cat "$local_marker")
            if [[ "$archive_time" == "$local_time" ]]; then
                log --startup "Local junest environment is up-to-date, skipping sync"
                return 0
            fi
        fi

        log --startup "Local junest environment outdated, updating..."
        rm -rf "$JUNEST_ROOT"
    fi

    log --startup "Decompressing junest archive to volatile..."
    mkdir -p "$JUNEST_ROOT"

    if ! command -v pv >/dev/null 2>&1; then
        if ! "${DECOMPRESS_CMD[@]}" < "$JUNEST_ARCHIVE" | tar -xf - -C "$VOLATILE"; then
            err --startup "Failed to decompress junest archive"
            rm -rf "$JUNEST_ROOT"
            return 1
        fi
    else
        local archive_size
        archive_size=$(du -sb "$JUNEST_ARCHIVE" 2>/dev/null | cut -f1)
        if [[ ! "$archive_size" =~ ^[0-9]+$ ]]; then
            err --startup "Failed to get archive size, falling back to decompression without progress bar"
            if ! "${DECOMPRESS_CMD[@]}" < "$JUNEST_ARCHIVE" | tar -xf - -C "$VOLATILE"; then
                err --startup "Failed to decompress junest archive"
                rm -rf "$JUNEST_ROOT"
                return 1
            fi
        else
            log --startup "Archive size: $archive_size bytes"
            if ! pv -s "$archive_size" -petr "$JUNEST_ARCHIVE" | "${DECOMPRESS_CMD[@]}" | tar -xf - -C "$VOLATILE"; then
                err --startup "Failed to decompress junest archive"
                rm -rf "$JUNEST_ROOT"
                return 1
            fi
        fi
    fi

    # Mark sync time
    stat -c %Y "$JUNEST_ARCHIVE" 2>/dev/null || stat -f %m "$JUNEST_ARCHIVE" 2>/dev/null > "${JUNEST_ROOT}/.june-sync-time"

    if [[ -f "$JUNE_STATE" ]]; then
        cp "$JUNE_STATE" "$STATE_DB"
    fi

    log --startup "Junest environment synced successfully"
    return 0
}

init_junest() {
    log --startup "Initializing new junest environment..."

    # Check if junest is available
    if ! command -v junest &>/dev/null; then
        err --startup "junest not found in PATH - please install junest first"
        err --startup "You can install it with: curl -L https://github.com/fsquillace/junest/releases/download/8.1.0/junest -o ~/.local/bin/junest && chmod +x ~/.local/bin/junest"
        return 1
    fi

    export JUNEST_HOME="$JUNEST_ROOT"

    # Remove any existing incomplete setup
    if [[ -d "$JUNEST_ROOT" ]]; then
        log --startup "Cleaning incomplete junest setup..."
        rm -rf "$JUNEST_ROOT"
    fi

    # Initialize junest in the correct location
    if ! junest setup; then
        err --startup "Failed to initialize junest"
        return 1
    fi

    # Update Junest env to avoid errors later
    log --startup "Updating junest env"
    junest -- bash -c "
        yay -Syy --noconfirm &&
        yay -Syu --noconfirm &&
        yay -S --noconfirm --needed base-devel git
    " || log --startup "Note: junest env installation failed"

    log --startup "Junest initialized - saving to persistent storage..."
    sync_to_sgoinfre
}

verify_shims() {
    if [[ ! -d "$SHIMS_DIR" ]]; then
        return
    fi

    local shim_count=0
    for shim in "$SHIMS_DIR"/*; do
        if [[ -f "$shim" ]] && grep -q "#june-shim" "$shim" 2>/dev/null; then
            # Update JUNEST_HOME in shim if needed
            sed -i "s|^export JUNEST_HOME=.*|export JUNEST_HOME=\"${JUNEST_ROOT}\"|" "$shim" 2>/dev/null || \
            sed -i '' "s|^export JUNEST_HOME=.*|export JUNEST_HOME=\"${JUNEST_ROOT}\"|" "$shim" 2>/dev/null
            ((shim_count++))
        fi
    done

    if (( shim_count > 0 )); then
        log --startup "Verified $shim_count june shims"
    fi
}

# --- Commands ---
cmd_install() {
    local pkgs=("$@")
    ensure_junest || return 1
    acquire_lock

    # Pretty packages display
    for e in "${pkgs[@]}"; do
        out+="${GREEN}${e}${NC}, "
    done
    formatted="${out%, }"

    log "Installing ${GREEN}$formatted${NC} inside junest via yay/pacman..."
    log "Note: avoid '-git' variants to not build from source."

    if [[ -n "$YAY_CMD" ]]; then
        "${JUNEST_CMD[@]}" -- ${YAY_CMD} --color=auto -S --noconfirm "${pkgs[@]}" || {
            cleanup_lock
            err "install failed"
            return 1
        }
    else
        "${JUNEST_CMD[@]}" -- pacman -S --noconfirm "${pkgs[@]}" || {
            cleanup_lock
            err "install failed"
            return 1
        }
    fi

    log "Install finished. Generating shims..."
    for pkg in "${pkgs[@]}"; do
        local bins
        bins=$("${JUNEST_CMD[@]}" -- ${YAY_CMD} --color=auto -Ql "$pkg" 2>/dev/null | grep -E '/(s?bin|opt/[^/]+/bin)/' | grep -v '/$' | awk '{print $2}' | sort -u)

        if [[ -z "$bins" ]]; then
            log "No executables found in package"
        else
            while IFS= read -r bin_path; do
                if [[ -n "$bin_path" ]]; then
                    local bin_name=$(basename "$bin_path")
                    create_shim "$bin_path" "$bin_name"
                fi
            done <<< "$bins"
        fi

        record_package "$pkg"
    done

    sync_to_sgoinfre

    cleanup_lock
    log "Package(s) ${GREEN}$formatted${NC} installed and synced successfully!"
}

cmd_remove() {
    local pkgs=("$@")
    ensure_junest || return 1

    acquire_lock

    # Pretty packages display
    for e in "${pkgs[@]}"; do
        out+="${GREEN}${e}${NC}, "
    done
    formatted="${out%, }"

    log "Removing ${RED}$formatted${NC} from junest..."

    for pkg in "${pkgs[@]}"; do
        local bins
        bins=$("${JUNEST_CMD[@]}" -- ${YAY_CMD} --color=auto -Ql "$pkg" 2>/dev/null | grep -E '/(s?bin|opt/[^/]+/bin)/' | grep -v '/$' | awk '{print $2}')

        while IFS= read -r bin_path; do
            if [[ -n "$bin_path" ]]; then
                local bin_name=$(basename "$bin_path")
                local shim_file="${SHIMS_DIR}/${bin_name}"
                if [[ -f "$shim_file" ]] && grep -q "#june-shim" "$shim_file" 2>/dev/null; then
                    rm -f "$shim_file"
                    log "Removed shim: ${RED}$shim_file${NC}"
                fi
            fi
        done <<< "$bins"

        echo "${pkg}|$(date +%s)|removed" >> "$STATE_DB"
    done

    "${JUNEST_CMD[@]}" -- ${YAY_CMD} --color=auto -R --noconfirm "${pkgs[@]}" || {
        cleanup_lock
        err "remove failed"
        return 1
    }

    sync_to_sgoinfre

    cleanup_lock
    log "Package(s) ${RED}$formatted${NC} removed and changes synced!"
}

cmd_sync() {
    acquire_lock
    sync_to_sgoinfre
    cleanup_lock
}

cmd_list() {
    local show_all=false

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --all|-a)
                show_all=true
                shift
                ;;
            *)
                err "Unknown option: $1"
                return 1
                ;;
        esac
    done

    ensure_junest || return 1

    if [[ "$show_all" == "true" ]]; then
        "${JUNEST_CMD[@]}" -- ${YAY_CMD} --color=auto -Q || "${JUNEST_CMD[@]}" -- pacman -Q
    else
        if [[ ! -f "$STATE_DB" ]]; then
            log "No user-installed packages found (state database not found)"
            log "Use 'june list --all' to see all packages in junest"
            return 0
        fi

        local installed_count=0
        local removed_count=0

        # Parse state database and show currently installed packages
        while IFS='|' read -r pkg timestamp status; do
            if [[ -n "$pkg" && -n "$status" ]]; then
                case "$status" in
                    "installed")
                        printf "${GREEN}%s${NC}\n" "$pkg"
                        ((installed_count++))
                        ;;
                    "removed")
                        ((removed_count++))
                        ;;
                esac
            fi
        done < "$STATE_DB" 2>/dev/null | sort -u

        if (( installed_count == 0 )); then
            log "No user-installed packages found"
            log "Use 'june install <package>' to install packages"
        else
            log "Total user-installed packages: ${GREEN}$installed_count${NC}"
            if (( removed_count > 0 )); then
                log "Previously removed packages: ${GRAY}$removed_count${NC}"
            fi
        fi

        log "Use 'june list --all' to see all packages in junest environment"
    fi
}

cmd_search() {
    local query="$1"
    ensure_junest || return 1

    log "Searching for packages matching '${YELLOW}$query${NC}'..."
    "${JUNEST_CMD[@]}" -- ${YAY_CMD} --color=auto -Ss "$query" || "${JUNEST_CMD[@]}" -- pacman -Ss "$query"
}

cmd_update() {
    ensure_junest || return 1

    acquire_lock

    log "Updating package databases and installed packages..."
    "${JUNEST_CMD[@]}" -- ${YAY_CMD} --color=auto -Syu --noconfirm || "${JUNEST_CMD[@]}" -- pacman -Syu --noconfirm

    sync_to_sgoinfre
    cleanup_lock

    log "${GREEN}System updated and synced!${NC}"
}

cmd_startup() {
    log --startup "Starting june environment sync..."

    export JUNEST_HOME="$JUNEST_ROOT"

    if ! ensure_dirs; then
        err --startup "Failed to ensure required directories"
        return 1
    fi

    # Check if ~/.junest exists (from previous default installation)
    if [[ -d "$HOME/.junest" ]] && [[ ! -d "$JUNEST_ROOT" ]]; then
        log --startup "Found junest in default location, moving to volatile..."
        mv "$HOME/.junest" "$JUNEST_ROOT" || {
            err "Could not move junest dir"
            return 1;
        }
    fi

    acquire_lock

    if ! sync_from_sgoinfre; then
        # Checking for only the directory here is kinda bad but well whatever
        # One way to break this is doing a mkdir at the beginning of the file (I did this before)
        if [[ ! -d "$JUNEST_ROOT" ]]; then
            init_junest
        fi
    fi

    verify_shims

    if [[ ":$PATH:" != *":$SHIMS_DIR:"* ]]; then
        export PATH="$SHIMS_DIR:$PATH"
        log --startup "Added $SHIMS_DIR to PATH"
    fi

    export JUNEST_HOME="$JUNEST_ROOT"

    cleanup_lock
    log --startup "June environment ready!"
}

cmd_clean_june() {
    log "${YELLOW}This will clean up all junest installations and june data, junest installation, and packages."
    log "${YELLOW}You will need to reinstall all packages after this.${NC}"
    log "${RED}**You should probably note down your installed packages** ${YELLOW}(\`june ls\`) so it's easier to reinstall them later on.${NC}"
    read -p "Continue? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log "Cancelled."
        return 0
    fi

    log "Cleaning up junest installations..."

    # Remove default junest location
    if [[ -d "$HOME/.junest" ]]; then
        log "Removing ~/.junest..."
        rm -rf "$HOME/.junest"
    fi

    # Remove volatile junest
    if [[ -d "$JUNEST_ROOT" ]]; then
        log "Removing $JUNEST_ROOT..."
        rm -rf "$JUNEST_ROOT"
    fi

    # Remove persistsnt archive
    if [[ -f "$JUNEST_ARCHIVE" ]]; then
        log "Removing persistent archive..."
        rm -f "$JUNEST_ARCHIVE"
    fi

    # Remove state files
    rm -f "$STATE_DB"
    rm -f "$JUNE_STATE"
    rm -f "$JUNEST_LOCK"
    rm -f "$LOG_FILE"

    # Remove shims
    if [[ -d "$SHIMS_DIR" ]]; then
        log "Removing june shims..."
        for shim in "$SHIMS_DIR"/*; do
            if [[ -f "$shim" ]] && grep -q "#june-shim" "$shim" 2>/dev/null; then
                rm -f "$shim"
                log "  Removed: $(basename "$shim")"
            fi
        done
    fi

    log "Cleanup complete!"
    log "You can now run 'june startup' to initialize a fresh environment."
}

cmd_doctor() {
    log "Environment Variables:"
    log "  JUNEST_HOME: ${JUNEST_HOME:-[not set]}"
    log "  PATH contains ~/bin: $(echo "$PATH" | grep -q "$HOME/bin" && echo "yes" || echo "no")"

    log "Directories:"
    log "  ~/.junest: "
    [[ -d "$HOME/.junest" ]] && err "EXISTS (should be removed!)" || log "not found (good)"

    log "  $JUNEST_ROOT: "
    [[ -d "$JUNEST_ROOT" ]] && log "exists" || err "NOT FOUND"

    log "  ~/bin: "
    [[ -d "$HOME/bin" ]] && log "exists" || err "NOT FOUND"

    log "Files:"
    log "  junest archive: "
    [[ -f "$JUNEST_ARCHIVE" ]] && log "exists ($(du -h "$JUNEST_ARCHIVE" | cut -f1))" || err "not found"

    log "  junest command: "
    command -v junest &>/dev/null && log "found at $(command -v junest)" || err "NOT FOUND"

    log "Junest Status:"
    if command -v junest &>/dev/null; then
        export JUNEST_HOME="$JUNEST_ROOT"
        if [[ -d "$JUNEST_HOME" ]]; then
            log "  Trying to run junest with JUNEST_HOME=$JUNEST_HOME"
            junest -- echo "[june]   junest is working!" 2>&1 | head -5
        else
            err "  JUNEST_HOME directory does not exist"
        fi
    else
        err "  Cannot test - junest not installed"
    fi

    log "Shims:"
    if [[ -d "$SHIMS_DIR" ]]; then
        local count=0
        for shim in "$SHIMS_DIR"/*; do
            if [[ -f "$shim" ]] && grep -q "#june-shim" "$shim" 2>/dev/null; then
                log "  - $(basename "$shim")"
                ((count++))
            fi
        done
        [[ $count -eq 0 ]] && log "  No june shims found"
    else
        log "  ~/bin directory not found"
    fi

    log "User-installed packages:"
    if [[ -f "$STATE_DB" ]]; then
        local installed_count=0
        while IFS='|' read -r pkg timestamp status; do
            if [[ -n "$pkg" && "$status" == "installed" ]]; then
                ((installed_count++))
            fi
        done < "$STATE_DB" 2>/dev/null
        log "  $installed_count packages tracked in state database"
    else
        log "  No state database found"
    fi

    log "Recommendations:"
    if [[ -d "$HOME/.junest" ]]; then
        log "  ! Remove ~/.junest directory (run 'june clean-june')"
    fi
    if [[ ! -d "$JUNEST_ROOT" ]]; then
        log "  ! Run 'june startup' to initialize junest"
    fi
    if ! command -v junest &>/dev/null; then
        log "  ! Install junest:"
        log "    curl -L https://github.com/fsquillace/junest/releases/download/8.1.0/junest -o ~/.local/bin/junest"
        log "    chmod +x ~/.local/bin/junest"
        log "    export PATH=\"\$HOME/.local/bin:\$PATH\""
    fi
}

# --- Main dispatch ---
# Check if being sourced (for startup functionality from shell rc files)
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    # Being sourced - run startup if needed
    export JUNEST_HOME="$JUNEST_ROOT"
    if [[ ! -d "$JUNEST_ROOT" ]] || [[ ! -f "${JUNEST_ROOT}/.june-sync-time" ]]; then
        cmd_startup
    else
        # Quick check if PATH needs updating
        if [[ ":$PATH:" != *":$SHIMS_DIR:"* ]]; then
            export PATH="$SHIMS_DIR:$PATH"
        fi
    fi
    return 0
fi

# Check for global --help flag first
if [[ $# -gt 0 && "$1" == "--help" || "$1" == "-h" ]]; then
    show_help
    exit 0
fi

# Command dispatch
if (( $# < 1 )); then
    show_help
    exit 0
fi

case "$1" in
    install)
        (( $# >= 2 )) || { err "install requires at least one package name"; exit 2; }
        cmd_install "${@:2}" ;;
    remove|uninstall)
        (( $# >= 2 )) || { err "remove requires at least one package name"; exit 2; }
        cmd_remove "${@:2}" ;;
    list|ls)
        shift
        cmd_list "$@" ;;
    search|find)
        (( $# == 2 )) || { err "search requires a query"; exit 2; }
        cmd_search "$2" ;;
    update|upgrade)
        cmd_update ;;
    sync)
        cmd_sync ;;
    startup)
        cmd_startup ;;
    clean-june)
        cmd_clean_june ;;
    doctor)
        cmd_doctor ;;
    junest-log)
        "${JUNEST_CMD[@]}" ;;
    junest)
        "$JUNEST_VANILLA_CMD" "${@:2}" ;;
    *)
        err "unknown command: $1"
        err "Use 'june --help' for usage information"
        exit 2 ;;
esac
