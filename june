#!/usr/bin/env bash
# june - prototype user-space package manager for junest environments
# Prototype features:
#  - june install <pkg>       : install small package via yay (inside junest)
# Notes:
#  - June exists to solve the lack of a proper package managers for a group of students.
#  - The apps cannot be installed directly with sudo, the users of this app never has access to admin rights.
#  - The apps have to be installed in junest, and the junest config must be in ~/goinfre/june.
#  - ~/goinfre is a bind mount to /goinfre/<USER>, same for ~/sgoinfre to /sgoinfre/<USER>.
#  - The goinfre is a fast and large directory on the local machine, potentially deleted on logout.
#  - The sgoinfre is a network directory with infinite storage, but it's slowish, and sometimes is unreachable.
#  - The only other data accessible to users is their home, but its size limit is really small (10GB, not suitable for IDEs).
#  - The goal of june is to have the junest data permanently installed in sgoinfre, but copied at login to the goinfre and ready for use.
#  - Junest is for provides a separate environment to install apps, as well as the AUR, but native speeds. June is a wrapper to make it convenient for our use case.
#  - So to recap, the app (a startup script has yet to be made) must be able to when making changes to the junest environment, change the version present in the sgoinfre. Using a strong compression is recommended.
#  - Oh yeah, also june creates shims in order for the apps to be accessible through the host system.
#  - Eventually, we will have a way to patch some apps (maybe a different install command with a finite list of apps) that need special configuration to run properly, I'm thinking IDEs (bc they cannot be allowed to write to home for space problems), process monitors (bc /proc is different in Junest).

set -euo pipefail
IFS=$'\n\t'

# --- Configuration ---
SGOINFRE_LINK="${HOME}/sgoinfre"    # typically a symlink to /sgoinfre/<USER>
SGOINFRE_BASE="/sgoinfre"           # where other users' sgoinfre dirs live
GOINFRE="${HOME}/goinfre"
JUNEST_ROOT="${GOINFRE}/junest-root"
SHIMS_DIR="${HOME}/bin"
STATE_DB="${GOINFRE}/june-state.db"   # simple state file (pipe-delimited)
JUNEST_CMD="$(command -v junest 2>/dev/null || true)"
YAY_CMD="yay"

# Create dirs if needed
mkdir -p "$SHIMS_DIR" "$JUNEST_ROOT"

# --- Helpers ---
log() { printf '%s\n' "[june] $*"; }
err() { printf '%s\n' "[june] ERROR: $*" >&2; }

ensure_junest() {
  if [[ -z "$JUNEST_CMD" ]]; then
    err "junest not found in PATH. Install junest (e.g. in ~/.local/bin) first."; return 1
  fi
}

# create a shim in $SHIMS_DIR for an executable inside junest root
create_shim() {
  local target_path="$1"   # absolute path inside junest root, e.g. /opt/envs/foo/bin/code
  local name="$2"
  local shim_file="${SHIMS_DIR}/${name}"
  cat > "$shim_file" <<EOF
#!/usr/bin/env bash
#june-shim
# Auto-generated by june
export JUNEST_ROOT_DIR="${JUNEST_ROOT}"
exec ${JUNEST_CMD} -- "${target_path}" "\$@"
EOF
  chmod +x "$shim_file"
  log "shim created: $shim_file -> $target_path"
}

# --- Commands ---
cmd_install() {
  local pkg="$1"
  ensure_junest || return 1
  log "Note: prefer installing 'package-bin' variants when available to avoid building AUR from source."
  log "Installing $pkg inside junest via yay/pacman (this may take a while)..."
  if [[ -n "$YAY_CMD" ]]; then
    ${JUNEST_CMD} -- ${YAY_CMD} -S --noconfirm "$pkg" || { err "install failed"; return 1; }
  else
    ${JUNEST_CMD} -- pacman -S --noconfirm "$pkg" || { err "install failed"; return 1; }
  fi
  log "Install finished. Generating shims for common bin dirs..."
  local bins; bins=$(${JUNEST_CMD} -- ${YAY_CMD} -Ql "$pkg"|grep bin|grep -v '/$'|sed 's/.* //'|sed '/^[[:space:]]*$/d')
  for bin_path in "${bins}"; do
    local bin_name; bin_name=$(echo ${bin_path}|sed 's/.*\///')
    log "Linking shim '${bin_name}' at ${bin_path}"
    create_shim "${bin_path}" "${bin_name}"
  done
}

# Command dispatch
if (( $# < 1 )); then
  cat <<EOF
Usage: june <command> [args]
Commands:
  install <pkg>                      Install small package inside junest (calls yay/pacman)
EOF
  exit 0
fi

case "$1" in
  install)
    (( $# == 2 )) || { err "install requires a package name"; exit 2; }
    cmd_install "$2" ;;
  *)
    err "unknown command: $1"; exit 2 ;;
esac
